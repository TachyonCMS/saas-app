<template>
  <q-layout view="lHh Lpr lFf">
    <q-header elevated>
      <q-toolbar class="on-primary">
        <q-btn
          flat
          dense
          round
          icon="menu"
          aria-label="Menu"
          @click="toggleLeftDrawer"
        />

        <q-toolbar-title class="on-primary">
          {{ layoutStore.title }}
        </q-toolbar-title>
        <q-btn-dropdown dropdown-icon="mdi-cog" size="sm" class="q-px-sm">
          <q-list bordered padding>
            <q-item-label header>{{ $t('customize') }}</q-item-label>
            <q-item>
              <q-item-section class="text-no-wrap">
                <LanguageSwitcher></LanguageSwitcher>
              </q-item-section>
            </q-item>

            <q-item>
              <q-item-section class="text-no-wrap">
                <q-toggle
                  v-model="colorStore.darkMode"
                  color="$primary"
                  :label="$t('darkMode')"
                  left-label
                  size="sm"
                ></q-toggle>
              </q-item-section>
            </q-item>
            <q-item>
              <q-item-section class="text-no-wrap">
                <ColorSwitcher></ColorSwitcher>
              </q-item-section>
            </q-item>
          </q-list>
        </q-btn-dropdown>
      </q-toolbar>
    </q-header>

    <q-drawer v-model="leftDrawerOpen" show-if-above bordered>
      <MainDrawer v-if="route.meta.appDrawer == 'MainDrawer'"></MainDrawer>
      <EntryDrawer v-if="route.meta.appDrawer == 'EntryDrawer'"></EntryDrawer>
    </q-drawer>

    <q-page-container>
      <router-view @notification="(event) => displayNotification(event)" />
    </q-page-container>
  </q-layout>
</template>

<script setup lang="ts">
import { ref, watchEffect, computed } from 'vue';
import { useQuasar, setCssVar, colors } from 'quasar';
const $q = useQuasar();
const { getPaletteColor, lighten, luminosity, brightness } = colors;
// CTA color
const ctaColor = ref(null);

// LAYOUT Store info about the layout
import { useLayoutStore } from '../stores/layout';
const layoutStore = useLayoutStore();

// I18N Store, info about the visitors selected language options
import { useI18nStore } from '../stores/i18n';
const i18nStore = useI18nStore();

// RegEx for validating hex color codes
const hexReg = /^#([0-9a-f]{3}){1,2}$/i;

// COLORS Store, info about the visitors selected color options
import { useColorStore } from '../stores/color';
const colorStore = useColorStore();

// LOCALIZATION
import messages from 'src/i18n';
import { useI18n } from 'vue-i18n';
const { locale } = useI18n({ useScope: 'global' });
locale.value = i18nStore.locale;
const { t } = useI18n({
  legacy: false, // you must set `false`, to use Composition API
  locale: i18nStore.locale,
  fallbackLocale: 'en-US',
  messages,
});

// NOTIFICATIONS Store, info about the visitors selected options
import { useNotificationsStore } from '../stores/notifications';
const notificationsStore = useNotificationsStore();
// Map internal notification statuses to Quasar notify types
const notifyTypeMap = {
  error: {
    qType: 'negative',
    labelCode: 'error',
  },
  warning: {
    qType: 'warning',
    labelCode: 'warning',
  },
  info: {
    qType: 'info',
    labelCode: 'info',
  },
  positive: {
    qType: 'positive',
    labelCode: 'success',
  },
  negative: {
    qType: 'negative',
    labelCode: 'sorry',
  },
};

// The value defined in quasar.variables.scss
const basePrimaryColor = getPaletteColor('primary');
const baseSecondaryColor = getPaletteColor('secondary');
const baseAccentColor = getPaletteColor('accent');

const onPrimary = ref('#FFF');
const onSecondary = ref('#FFF');
const onAccent = ref('#FFF');
const onCta = ref('#FFF');

// COLOR DEFINITIONS

// Calculate default primary shades
const dk5 = ref(lighten(basePrimaryColor, -65));
const onDk5 = brightness(dk5.value) > 100 ? '#000' : '#FFF';
const dk4 = ref(lighten(basePrimaryColor, -50));
const onDk4 = brightness(dk4.value) > 100 ? '#000' : '#FFF';
const dk3 = ref(lighten(basePrimaryColor, -35));
const onDk3 = brightness(dk3.value) > 100 ? '#000' : '#FFF';
const dk2 = ref(lighten(basePrimaryColor, -20));
const onDk2 = brightness(dk2.value) > 100 ? '#000' : '#FFF';
const dk1 = ref(lighten(basePrimaryColor, -10));
const onDk1 = brightness(dk1.value) > 100 ? '#000' : '#FFF';
const lt5 = ref(lighten(basePrimaryColor, 65));
const onLt5 = brightness(lt5.value) > 100 ? '#000' : '#FFF';
const lt4 = ref(lighten(basePrimaryColor, 50));
const onLt4 = brightness(lt4.value) > 100 ? '#000' : '#FFF';
const lt3 = ref(lighten(basePrimaryColor, 35));
const onLt3 = brightness(lt3.value) > 100 ? '#000' : '#FFF';
const lt2 = ref(lighten(basePrimaryColor, 20));
const onLt2 = brightness(lt2.value) > 100 ? '#000' : '#FFF';
const lt1 = ref(lighten(basePrimaryColor, 10));
const onLt1 = brightness(lt1.value) > 100 ? '#000' : '#FFF';
// Calculate default secondary shades
const sdk5 = ref(lighten(baseSecondaryColor, -65));
const onSdk5 = brightness(sdk5.value) > 100 ? '#000' : '#FFF';
const sdk4 = ref(lighten(baseSecondaryColor, -50));
const onSdk4 = brightness(sdk4.value) > 100 ? '#000' : '#FFF';
const sdk3 = ref(lighten(baseSecondaryColor, -35));
const onSdk3 = brightness(sdk3.value) > 100 ? '#000' : '#FFF';
const sdk2 = ref(lighten(baseSecondaryColor, -20));
const onSdk2 = brightness(sdk2.value) > 100 ? '#000' : '#FFF';
const sdk1 = ref(lighten(baseSecondaryColor, -10));
const onSdk1 = brightness(sdk1.value) > 100 ? '#000' : '#FFF';
const slt5 = ref(lighten(baseSecondaryColor, 65));
const onSlt5 = brightness(slt5.value) > 100 ? '#000' : '#FFF';
const slt4 = ref(lighten(baseSecondaryColor, 50));
const onSlt4 = brightness(slt4.value) > 100 ? '#000' : '#FFF';
const slt3 = ref(lighten(baseSecondaryColor, 35));
const onSlt3 = brightness(slt3.value) > 100 ? '#000' : '#FFF';
const slt2 = ref(lighten(baseSecondaryColor, 20));
const onSlt2 = brightness(slt2.value) > 100 ? '#000' : '#FFF';
const slt1 = ref(lighten(baseSecondaryColor, 10));
const onSlt1 = brightness(slt1.value) > 100 ? '#000' : '#FFF';

if (!colorStore.primaryColor) {
  colorStore.setPrimaryColor(basePrimaryColor);
}
if (!colorStore.secondaryColor) {
  colorStore.setSecondaryColor(baseSecondaryColor);
}
if (!colorStore.accentColor) {
  colorStore.setAccentColor(baseAccentColor);
}

// Change the primary color and shades
const setPrimaryColor = (hexCode: string) => {
  setCssVar('primary', hexCode, document.documentElement);

  console.log('Luminosity: ' + luminosity(hexCode));
  console.log('Brightness: ' + brightness(hexCode));

  dk5.value = lighten(hexCode, -65);
  console.log('DK5 Luminosity: ' + luminosity(dk5.value));
  console.log('DK5 Brightness: ' + brightness(dk5.value));
  dk4.value = lighten(hexCode, -50);
  dk3.value = lighten(hexCode, -35);
  dk2.value = lighten(hexCode, -20);
  dk1.value = lighten(hexCode, -10);

  lt5.value = lighten(hexCode, 65);
  console.log('LT5 Luminosity: ' + luminosity(lt5.value));
  console.log('LT5 Brightness: ' + brightness(lt5.value));

  console.log('WHITE Luminosity: ' + luminosity('#ffffff'));
  console.log('WHITE Brightness: ' + brightness('#ffffff'));

  console.log('BLACK Luminosity: ' + luminosity('#000000'));
  console.log('BLACK Brightness: ' + brightness('#000000'));

  lt4.value = lighten(hexCode, 50);
  lt3.value = lighten(hexCode, 35);
  lt2.value = lighten(hexCode, 20);

  lt1.value = lighten(hexCode, 10);
};

// Change the secondary color and shades
const setSecondaryColor = (hexCode: string) => {
  setCssVar('secondary', hexCode, document.documentElement);
  sdk5.value = lighten(hexCode, -65);
  sdk4.value = lighten(hexCode, -50);
  sdk3.value = lighten(hexCode, -35);
  sdk2.value = lighten(hexCode, -20);
  sdk1.value = lighten(hexCode, -10);
  slt5.value = lighten(hexCode, 65);
  slt4.value = lighten(hexCode, 50);
  slt3.value = lighten(hexCode, 35);
  slt2.value = lighten(hexCode, 20);
  slt1.value = lighten(hexCode, 10);
};

// DARK MODE - Enable Quasar dark mode toggling

$q.dark.set('auto');
// Update navbar in dark mode
watchEffect(() => {
  $q.dark.set(colorStore.darkMode);
  if (colorStore.darkMode) {
    setPrimaryColor('#383838');
    setSecondaryColor('#696969');
  } else {
    setPrimaryColor(colorStore.primaryColor);
    setSecondaryColor(colorStore.secondaryColor);
  }
});

// Watch for new notifications and display them.
watchEffect(() => {
  notificationsStore.notifications.forEach((note) => {
    displayNotification(note);
  });
});

const displayNotification = async (notification) => {
  const msg =
    '<span class="text-h6">' +
    t(notifyTypeMap[notification.type].labelCode) +
    '</span><br />' +
    notification.message;
  $q.notify({
    message: msg,
    multiLine: true,
    position: notification.position,
    type: notifyTypeMap[notification.type].qType,
    html: true,
    //closeBtn: true,
    actions: [
      {
        label: t('close'),
        handler: () => {
          notificationsStore.delete(notification.id);
        },
      },
    ],
  });
};
// DRAWER
import { useRoute } from 'vue-router';
// Potential left drawer content
import MainDrawer from './drawers/MainDrawer.vue';
import EntryDrawer from './drawers/EntryDrawer.vue';
const route = useRoute();
console.log(route.meta.appDrawer);
// Mange left drawer state
const leftDrawerOpen = ref(false);
function toggleLeftDrawer() {
  leftDrawerOpen.value = !leftDrawerOpen.value;
}

// I18N - Allow choosing an App UI language, content language MAY NOT be affected.
import LanguageSwitcher from 'components/LanguageSwitcher.vue';

// Change the secondary color and shades
const setAccentColor = (hexCode: string) => {
  setCssVar('accent', hexCode, document.documentElement);
};

const currCtaColor = computed(() => {
  return colorStore.ctaColor ? colorStore.ctaColor : '#F00';
});

// Change the secondary color and shades
const setCtaColor = (hexCode: string) => {
  console.log(hexCode);
  colorStore.setCtaColor(hexCode);
  setCssVar('cta', hexCode, document.documentElement);
  ctaColor.value = hexCode;
  onCta.value = brightness(hexCode) > 100 ? '#000' : '#FFF';
};

// COLORS CURRENT
const currPrimaryColor = computed(() => {
  return colorStore.primaryColor ? colorStore.primaryColor : basePrimaryColor;
});
const currSecondaryColor = computed(() => {
  return colorStore.secondaryColor
    ? colorStore.secondaryColor
    : baseSecondaryColor;
});
const currAccentColor = computed(() => {
  return colorStore.accentColor ? colorStore.accentColor : baseAccentColor;
});

console.log('Dynamic Primary Color: ' + currPrimaryColor);

// COLORS SWITCHER- Allow choosing app colors
import ColorSwitcher from 'components/ColorSwitcher.vue';

watchEffect(() => {
  if (hexReg.test(currPrimaryColor.value)) {
    setPrimaryColor(currPrimaryColor.value);
  }
});

watchEffect(() => {
  if (hexReg.test(currSecondaryColor.value)) {
    setSecondaryColor(currSecondaryColor.value);
  }
});

watchEffect(() => {
  if (hexReg.test(currAccentColor.value)) {
    setAccentColor(currAccentColor.value);
    //onAccent.value = brightness(currAccentColor.value) > 100 ? '#000' : '#FFF';
  }
});

watchEffect(() => {
  if (hexReg.test(currCtaColor.value)) {
    console.log('WTFFFFFFF' + currCtaColor.value);
    setCtaColor(currCtaColor.value);
    //onCta.value = brightness(currCtaColor.value) > 100 ? '#000' : '#FFF';
  }
});

//const setShades(type, hexColor) =
</script>


<style lang="scss">
// TEXT COLOR USED ON BACKGROUND
.on-primary {
  color: v-bind('onPrimary');
}
.on-secondary {
  color: v-bind('onSecondary');
}
.on-accent {
  color: v-bind('onAccent');
}
.on-cta {
  color: v-bind('onCta');
}

.on-dk5 {
  color: v-bind('onDk5');
}
.on-dk4 {
  color: v-bind('onDk4');
}
.on-dk3 {
  color: v-bind('onDk3');
}
.on-dk2 {
  color: v-bind('onDk2');
}
.on-dk1 {
  color: v-bind('onDk1');
}
.on-lt5 {
  color: v-bind('onLt5');
}
.on-lt4 {
  color: v-bind('onLt4');
}
.on-lt3 {
  color: v-bind('onLt3');
}
.on-lt2 {
  color: v-bind('onLt2');
}
.on-lt1 {
  color: v-bind('onLt1');
}

.on-sdk5 {
  color: v-bind('onSdk5');
}
.on-sdk4 {
  color: v-bind('onSdk4');
}
.on-sdk3 {
  color: v-bind('onSdk3');
}
.on-sdk2 {
  color: v-bind('onSdk2');
}
.on-sdk1 {
  color: v-bind('onSdk1');
}
.on-slt5 {
  color: v-bind('onSlt5');
}
.on-slt4 {
  color: v-bind('onSlt4');
}
.on-slt3 {
  color: v-bind('onSlt3');
}
.on-slt2 {
  color: v-bind('onSlt2');
}
.on-slt1 {
  color: v-bind('onSlt1');
}

// BACKGROUND COLOR
// CTA Color
.bg-cta {
  background-color: v-bind('ctaColor');
}
// Primary Dark
.bg-dk5 {
  background-color: v-bind('dk5');
}
.bg-dk4 {
  background-color: v-bind('dk4');
}
.bg-dk3 {
  background-color: v-bind('dk3');
}
.bg-dk2 {
  background-color: v-bind('dk2');
}
.bg-dk1 {
  background-color: v-bind('dk1');
}
// Primary Light
.bg-lt5 {
  background-color: v-bind('lt5');
}
.bg-lt4 {
  background-color: v-bind('lt4');
}
.bg-lt3 {
  background-color: v-bind('lt3');
}
.bg-lt2 {
  background-color: v-bind('lt2');
}
.bg-lt1 {
  background-color: v-bind('lt1');
}
// Secondary Dark
.bg-sdk5 {
  background-color: v-bind('sdk5');
}
.bg-sdk4 {
  background-color: v-bind('sdk4');
}
.bg-sdk3 {
  background-color: v-bind('sdk3');
}
.bg-sdk2 {
  background-color: v-bind('sdk2');
}
.bg-sdk1 {
  background-color: v-bind('sdk1');
}
// Secondary light
.bg-slt5 {
  background-color: v-bind('slt5');
}
.bg-slt4 {
  background-color: v-bind('slt4');
}
.bg-slt3 {
  background-color: v-bind('slt3');
}
.bg-slt2 {
  background-color: v-bind('slt2');
}
.bg-slt1 {
  background-color: v-bind('slt1');
}

// TEXT COLOR
// CTA Color
.text-cta {
  color: v-bind('ctaColor');
}
.text-dk5 {
  color: v-bind('dk5');
}
.text-dk4 {
  color: v-bind('dk4');
}
.text-dk3 {
  color: v-bind('dk3');
}
.text-dk2 {
  color: v-bind('dk2');
}
.text-dk1 {
  color: v-bind('dk1');
}
.text-lt5 {
  color: v-bind('lt5');
}
.text-lt4 {
  color: v-bind('lt4');
}
.text-lt3 {
  color: v-bind('lt3');
}
.text-lt2 {
  color: v-bind('lt2');
}
.text-lt1 {
  color: v-bind('lt1');
}

.text-sdk5 {
  color: v-bind('sdk5');
}
.text-sdk4 {
  color: v-bind('sdk4');
}
.text-sdk3 {
  color: v-bind('sdk3');
}
.text-sdk2 {
  color: v-bind('sdk2');
}
.text-sdk1 {
  color: v-bind('sdk1');
}
.text-slt5 {
  color: v-bind('slt5');
}
.text-slt4 {
  color: v-bind('slt4');
}
.text-slt3 {
  color: v-bind('slt3');
}
.text-slt2 {
  color: v-bind('slt2');
}
.text-slt1 {
  color: v-bind('slt1');
}
</style>
